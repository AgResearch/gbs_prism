#!/bin/sh
#
# master interactive script for processing a hiseq run through bcl2fastq and GBS analysis
#

export SEQ_PRISMS_BIN=/dataset/gseq_processing/active/bin/gbs_prism/seq_prisms 
export GBS_PRISM_BIN=/dataset/gseq_processing/active/bin/gbs_prism
BCL2FASTQ_NODE=invbfopp10.agresearch.co.nz   # iramohio-01

gbs_version=$1

function read_answer_with_default() {
   read answer
   if [ -z "$answer" ]; then
      answer=$@
   fi
}

function get_processing_parameters() {
   PARAMETERS_FILE=$OUTPUT_ROOT/SampleProcessing.json
   if [ -f $PARAMETERS_FILE ]; then
      echo "found existing processing parameters file $OUTPUT_ROOT/SampleProcessing.json  - is it OK to update this with GBS settings ? (y/n, default=n)"
      read_answer_with_default n

      if [ "$answer" != "y" ]; then
         echo "OK will not update"
      else
         echo "OK will update, saving previous as $OUTPUT_ROOT/SampleProcessing.json.old"
         mv $OUTPUT_ROOT/SampleProcessing.json $OUTPUT_ROOT/SampleProcessing.json.old
         PARAMETERS_FILE=""
      fi
   else
      PARAMETERS_FILE=""
   fi

   if [ -z "$PARAMETERS_FILE" ]; then
      # tardis --local used so not queued
      echo "compiling processing parameters file $OUTPUT_ROOT/SampleProcessing.json . . .

      "
      tardis -d $OUTPUT_ROOT --hpctype local $GBS_PRISM_BIN/get_processing_parameters.py --json_out_file $OUTPUT_ROOT/SampleProcessing.json --parameter_file $SAMPLE_SHEET --species_references_file  /dataset/hiseq/active/sample-sheets/reference_genomes.csv
   fi

   if [ ! -f "$OUTPUT_ROOT/SampleProcessing.json" ]; then
      echo "error , failed creating parameters files $OUTPUT_ROOT/SampleProcessing.json"
      exit 1
   else
      PARAMETERS_FILE=$OUTPUT_ROOT/SampleProcessing.json
   fi


   echo "will use the following processing parameters (press enter for listing)"
   read answer
   more $PARAMETERS_FILE
   echo "

   OK to use these parameters ? (y/n, default=y)
   "
   read_answer_with_default y
   if [ "$answer" == "n" ]; then
      echo "please edit $PARAMETERS_FILE and try again"
      exit 1
   fi
}


function run_bcl2fastq() {
   if [ $HOSTNAME != $BCL2FASTQ_NODE ]; then
      echo "sorry you need to be logged on to iramohio-01 to run bcl2fastq"
      exit 1
   fi

   echo "checking run is completed (i.e. looking for $HISEQ_ROOT/$RUN/RTAComplete.txt)"
   if [ ! -f $HISEQ_ROOT/$RUN/RTAComplete.txt ]; then
      echo "*** landmark file $HISEQ_ROOT/$RUN/RTAComplete.txt does not exist => this run has not completed sequencing - quitting"
      exit 1
   fi
   echo "checking sample sheet has been configured for gbs q/c"
   grep -i "downstream_processing" $HISEQ_ROOT/$RUN/SampleSheet.csv > /dev/null 2>&1
   if [ $? != 0 ]; then
      echo "could not find landmark column 'downstream_processing' in $HISEQ_ROOT/$RUN/SampleSheet.csv : attempting to edit and replace the sample sheet"

      # back up the original 
      if [ ! -f $HISEQ_ROOT/$RUN/SampleSheet.csv.orig ]; then
         echo "saving the original..."
         set -x
         $GBS_PRISM_BIN/replace_hiseq_samplesheet -i $HISEQ_ROOT/$RUN/SampleSheet.csv -o $HISEQ_ROOT/$RUN/SampleSheet.csv.orig > /dev/null 2>&1
         set +x
         if [ $? != 0 ]; then
            echo "there was an error saving the original - quitting"
            exit 1
         fi
      fi

      # generate the edited version
      echo "editing..."
      tempfile=`mktemp`
      set -x
      cat $HISEQ_ROOT/$RUN/SampleSheet.csv | $GBS_PRISM_BIN/sanitiseSampleSheet.py -r $RUN --supply_missing --add_header | tr -d '\r' > $tempfile
      chmod o+r,g+r $tempfile
      set +x


      echo "the edited sheet looks like this : ...(press enter for listing)..."
      read answer 
      more $tempfile
      echo "

      "
      echo "is this OK ? (y/n, default=y)"
      read_answer_with_default y
      if [ "$answer" != "y" ]; then
         echo "ok quitting"
         exit 1
      fi

      # echo "replacing..."
      set -x
      $GBS_PRISM_BIN/replace_hiseq_samplesheet -i $tempfile -o $HISEQ_ROOT/$RUN/SampleSheet.csv > /dev/null 2>&1
      set +x
      if [ $? != 0 ]; then
         echo "there was an error replacing the original - quitting"
         exit 1
      fi
   fi


   # set up for bcl2fastq run
   mkdir -p $BCL2FASTQ_ROOT/$RUN
   if [ ! -d $BCL2FASTQ_ROOT/$RUN ]; then
      echo "could not create bcl2fastq output folder $BCL2FASTQ_ROOT/$RUN , quitting"
      exit 1
   fi
   echo "about to run bcl2fastq using

   $SEQ_PRISMS_BIN/sequencing_qc_prism.sh -a bcl2fastq -O $BCL2FASTQ_ROOT/$RUN $HISEQ_ROOT/$RUN/SampleSheet.csv > $BCL2FASTQ_ROOT/$RUN/bcl2fastq.log 2>&1

   OK ? (y/n, default=y)
   "
   read_answer_with_default  y
   if [ $answer != "y" ]; then
      echo "OK quitting"
      exit 1
   fi
   echo "
   starting bcl2fastq, this should take around an hour or two...

   "

   echo "running $SEQ_PRISMS_BIN/sequencing_qc_prism.sh -a bcl2fastq -O $BCL2FASTQ_ROOT/$RUN $HISEQ_ROOT/$RUN/SampleSheet.csv" > $BCL2FASTQ_ROOT/$RUN/bcl2fastq.log

   $SEQ_PRISMS_BIN/sequencing_qc_prism.sh -a bcl2fastq -O $BCL2FASTQ_ROOT/$RUN $HISEQ_ROOT/$RUN/SampleSheet.csv >> $BCL2FASTQ_ROOT/$RUN/bcl2fastq.log 2>&1

   if [ $? != 0 ]; then
      echo "

      bcl2fastq has finished but received a non zero process exit code from sequencing_qc_prism - do
      you want to continue ? (y/n, default = n)
      "
      read_answer_with_default n 
      if [ $answer != "y" ]; then
         echo "OK quitting"
         exit 1
      fi
   fi
   echo "

   bcl2fastq completed ok 

   about to standardise the sequence file disposition (i.e. make project folders for non-barcoded output
    - e.g. a file SQNNNN_L00x_R1_001.fastq.gz will generate a folder SQNNNN etc.)

   "
   folders=""

   # get non-redundant list of the GBS librarys represented  (e.g. parse SQ0801_S1_L001_R1_001.fastq.gz to get SQ0801) 
   for file in $BCL2FASTQ_ROOT/$RUN/bcl2fastq/*.fastq.gz ; do
      base=`basename $file`
      project=`echo $base |  awk -F_ '{print $1}' -`
      echo $folders | grep -i $project > /dev/null 2>&1
      if [ $? != 0 ]; then
         folders="$folders $project"
      fi
   done

   echo "please confirm which folders to create (default : $folders )"
   read_answer_with_default $folders
   set -x
   for folder in $answer; do
      mkdir -p $BCL2FASTQ_ROOT/$RUN/bcl2fastq/$folder
      cp -s $BCL2FASTQ_ROOT/$RUN/bcl2fastq/${folder}*.fastq.gz $BCL2FASTQ_ROOT/$RUN/bcl2fastq/$folder
   done
   set +x

   
   echo "*** sequence file disposition complete ***

   finding sequence files for fastqc..."
   find $BCL2FASTQ_ROOT/$RUN -name "*.fastq.gz" -type f -print > $BCL2FASTQ_ROOT/$RUN/sequence_files.txt
   echo "

   about to start fastqc in the background using 

   nohup $SEQ_PRISMS_BIN/sequencing_qc_prism.sh -a fastqc -O $BCL2FASTQ_ROOT/$RUN \`cat $BCL2FASTQ_ROOT/$RUN/sequence_files.txt\` > $BCL2FASTQ_ROOT/$RUN/fastqc.log 2>&1 &

   OK ? (y/n, default=y)
   "
   read_answer_with_default y
   if [ $answer != "y" ]; then
      echo "OK quitting"
      exit 1
   fi
   echo "

   running fastqc in background, then will continue with GBS q/c...

   "

   nohup $SEQ_PRISMS_BIN/sequencing_qc_prism.sh -a fastqc -O $BCL2FASTQ_ROOT/$RUN `cat $BCL2FASTQ_ROOT/$RUN/sequence_files.txt` > $BCL2FASTQ_ROOT/$RUN/fastqc.log 2>&1 &
}


function get_run_opts() {

   DRY_RUN=no
   DEBUG=no
   HPC_TYPE=slurm
   FILES=""
   OUT_ROOT=""
   SNP_ENGINE=tassel        # the only one supported at this point

   HISEQ_ROOT=/dataset/hiseq/active
   MISEQ_ROOT=/dataset/miseq/active

   HISEQ_PROCESSING_ROOT=/dataset/gseq_processing/scratch/gbs
   # there is no MISEQ version of that as processing miseq using this script not supported currently 
  
   HISEQ_BCL2FASTQ_ROOT=/dataset/gseq_processing/scratch/illumina/hiseq
   # there is no MISEQ version of that as processing miseq using this script not supported currently 


   echo "*** gbs analysis version $gbs_version (using SNP engine = $SNP_ENGINE) ***
* note that you can paste into your terminal window by clicking your right mouse button
* at any stage you can press CTRL-C to exit the dialogs
* if you would prefer to run a single batch command, use ag_gbs_qc_prism.sh (-h for help) - e.g. 
  this allows you to run the analysis on any collection of input files
"

   ####### get and check RUN
   while [ 1 ] ; do
      echo "
please give the full name of gbs run you would like to process (e.g. 180403_M02412_0073_000000000-D3JC9 (miseq) 
or 180124_D00390_0342_ACBG7VANXX (hiseq - archived) or 180718_D00390_0389_ACCRDYANXX (hiseq not (yet) archived) )

"
      read RUN
      if [ ! -z "$RUN" ]; then 
         if [ -d $HISEQ_ROOT/$RUN ]; then 
            gbs_ROOT=$HISEQ_ROOT
            PROCESSING_ROOT=$HISEQ_PROCESSING_ROOT
            BCL2FASTQ_ROOT=$HISEQ_BCL2FASTQ_ROOT
            break
         elif [ -d $MISEQ_ROOT/$RUN ]; then
            echo "
to process miseq data, you will need to run the underlying scripts
demultiplex_prism.sh and genotype_prism.sh , rather than this master
script (which assumes hiseq data disposition)
"
            exit 1
         else 
            echo "sorry can't find $RUN under either $HISEQ_ROOT or $MISEQ_ROOT "
         fi
      fi

   done

   echo "will process $gbs_ROOT/$RUN"
   ####### check whether we can find sequence data - if not confirm  bcl2fastq is needed 
   echo "checking sequence data (looking under  $BCL2FASTQ_ROOT/$RUN)...."
   ls -lR $BCL2FASTQ_ROOT/$RUN/bcl2fastq 2>/dev/null | grep "fastq.gz"   > /dev/null 2>&1 
   if [ $? != 0 ]; then
      echo "could not find fastq data under $BCL2FASTQ_ROOT/$RUN so looks like bcl2fastq is needed - OK to run that ? (y/n, default=y)"
      read_answer_with_default y 
      if [ "$answer" != "y" ]; then
         echo "OK quitting"
         exit 1
      fi
      run_bcl2fastq 
   fi

   ######## continue on with GBS q/c ###########
   # set up output folder
   while [ 1 ]; do
      echo "

      please specify GBS q/c output base folder (or just press ENTER to use default , $PROCESSING_ROOT/$RUN)"
      read_answer_with_default $PROCESSING_ROOT/$RUN
      NEW_ROOT=$answer
      if [ -d $NEW_ROOT ]; then
         echo "warning - $NEW_ROOT already exists, use anyway ? (y/n, default=y)"
         read_answer_with_default y
         if [ $answer == "y" ]; then
            OUTPUT_ROOT=$NEW_ROOT
            break
         fi
      else
         mkdir -p $NEW_ROOT
         if [ -d $NEW_ROOT ]; then
            OUTPUT_ROOT=$NEW_ROOT
            break
         fi
      fi
   done

   echo "will use output root folder $OUTPUT_ROOT

   "



   ####### check whether run is in database  - import it if not 
   echo "

checking if run is in the database... 

"
   in_db=`$GBS_PRISM_BIN/is_run_in_database.sh $RUN | sed 's/\s//g' -`
   if [ $in_db == "0" ]; then
      echo "$RUN is not in the database - will run database import first , about to execute 

$GBS_PRISM_BIN/database_prism.sh -i -t import_new_run -r $RUN

logging to $OUTPUT_ROOT/database_prism.log 

OK ? (y/n, default = y)
"
      read_answer_with_default y
      if [ "$answer" != "n" ]; then
         echo "running $GBS_PRISM_BIN/database_prism.sh -i -t import_new_run -r $RUN" > $OUTPUT_ROOT/database_prism.log
         $GBS_PRISM_BIN/database_prism.sh -i -t import_new_run -r $RUN >> $OUTPUT_ROOT/database_prism.log 2>&1
         if [ $? != 0 ]; then
            echo "

sorry - quitting after received bad return code from database import -try looking at

$OUTPUT_ROOT/database_prism.log

"
            exit 1
         fi
      else
         echo "OK quitting - can't run GBS q/c until run has been imported to database"
         exit 1
      fi
   fi


   ####### get and check whether to run locally or on the cluster
   echo "

should this run be queued on the compute cluster ? (y/n, default=y. If n, will be run locally)
"
   read_answer_with_default y
   if [ "$answer" != "n" ]; then 
      HPC_TYPE=slurm
   else
      HPC_TYPE=local
   fi
   

   ####### get and check the analysis type 
   while [ 1 ] ; do
      echo "
please give which q/c analysis you want (all, demultiplex, kgd, kmer_analysis, allkmer_analysis, fasta_sample, annotation , bwa_mapping) (or just press enter to run all)  
(note - entering kgd implies demultiplex will also be run (unless already done); annotation implies also kgd will be 
run (unless already done), etc.)

"
      read_answer_with_default all
      ANALYSIS=$answer

      if [[ ( "$ANALYSIS" != "demultiplex" ) && ( "$ANALYSIS" != "kgd" ) && ( "$ANALYSIS" != "kmer_analysis" ) && ( "$ANALYSIS" != "allkmer_analysis" ) && ( "$ANALYSIS" != "bwa_mapping" ) && ( "$ANALYSIS" != "fasta_sample" ) && ( "$ANALYSIS" != "annotation" ) && ( "$ANALYSIS" != "all" ) ]]; then
         echo "analysis must be one of demultiplex, kgd, kmer_analysis, allkmer_analysis, bwa_mapping , annotation, fasta_sample or all"
      else
         break
      fi
   done

   echo "will use analysis=$ANALYSIS
   "


   ####### get and check the sample sheet and a parameters file that controls the processing 
   ####### sample sheet:
   SAMPLE_SHEET=""
   if [ -f $gbs_ROOT/$RUN/SampleSheet.csv ]; then
      echo "will use sample sheet $gbs_ROOT/$RUN/SampleSheet.csv , containing...(press enter for listing)..."
      read answer 
      more $gbs_ROOT/$RUN/SampleSheet.csv
      echo "

      "
      echo "is this OK ? (y/n, default=y)"
      read_answer_with_default y
      if [ "$answer" == "y" ]; then
         SAMPLE_SHEET=$gbs_ROOT/$RUN/SampleSheet.csv 
      fi
   else
      echo "warning - could not find a sample sheet in the usual place ( $gbs_ROOT/$RUN/SampleSheet.csv )"
   fi
   while [ -z "$SAMPLE_SHEET" ]; do
      echo "please enter enter or paste in the full path to the sample sheet specifying lane contents and downstream processing"
      read SAMPLE_SHEET
      if [ ! -f "$SAMPLE_SHEET" ]; then 
         SAMPLE_SHEET=""
      fi
   done

   ####### processing parameters
   get_processing_parameters  

}


function get_cohort_opts() {
   echo "getting default GBS libraries to process. . .

   "

   LIBRARY_MONIKERS=`psql -U agrbrdf -d agrbrdf -h invincible -v run=\'$RUN\' -f $GBS_PRISM_BIN/get_run_samples.psql -q`
   echo "please enter libraries to run (default = $LIBRARY_MONIKERS)"
   read_answer_with_default $LIBRARY_MONIKERS
   LIBRARY_MONIKERS=$answer

   # check if already run - if so prompt for reimport
   to_do=""
   to_import=""
   for library_moniker in $LIBRARY_MONIKERS; do
      # look for landmark file(s)  
      ls $OUTPUT_ROOT/*.${library_moniker}*.demultiplex > $OUTPUT_ROOT/manifest.txt 2>&1
      grep -q "cannot access" $OUTPUT_ROOT/manifest.txt 
      if [ $? != 0 ]; then
          echo "looks like $library_moniker has already been processed (found landmarks )"
          echo "do you want to reprocess this library ? (y/n, default = y)"
          read_answer_with_default y
          if [ $answer != "y" ]; then
             echo "ok skipping $library_moniker"
             continue
          else
             to_do="$to_do $library_moniker"
             echo "ok will reprocess $library_moniker "
             echo "do you need the keyfile re-imported ? (y/n, default =y)"
             read_answer_with_default y
             if [ $answer != "y" ]; then
                 echo "ok will not reimport keyfile"
             else
                 to_import="$to_import $library_moniker"
                 echo "ok will reimport keyfile"
             fi
          fi
      else
          to_do="$to_do $library_moniker"
      fi
   done

   # exit if nothing to do ; run imports if any to do
   LIBRARY_MONIKERS=$to_do
   if [ -z "$LIBRARY_MONIKERS" ]; then
      echo "quitting , nothing to do"
      exit 1
   fi

   if [ ! -z "$to_import" ]; then
      echo "about to reimport keyfiles for $to_import - ok ? (y/n, default = y)"
      read_answer_with_default y
      if [ $answer != "y" ]; then
         echo "ok quitting"
         exit 1
      fi
      for library in $to_import; do
         echo "running $GBS_PRISM_BIN/database_prism.sh -i -t reimport_library -r $RUN -s $library "
         echo "press Enter to continue. . ."
         read answer
         $GBS_PRISM_BIN/database_prism.sh -i -t reimport_library -r $RUN -s $library
         return_code=$?
         if [ $return_code != 0 ]; then
            echo "looks like there was a problem with the import (exit code $return_code)  - check $OUTPUT_ROOT/reimport.log - quitting"
            exit 1
         fi
      done

      echo "*** finished reimporting keyfiles  ***"

      echo "updating processing parameters"
      mv $OUTPUT_ROOT/SampleProcessing.json $OUTPUT_ROOT/SampleProcessing.json.old
      get_processing_parameters

   fi


   echo "getting default GBS cohorts to process. . .

   "
   gbs_cohorts=""
   for library_moniker in $LIBRARY_MONIKERS; do
       echo "from $library_moniker . . ."
       library_cohorts=`tardis -q -d $OUTPUT_ROOT --hpctype local $GBS_PRISM_BIN/get_processing_parameters.py --parameter_file $PARAMETERS_FILE --parameter_name cohorts  --sample $library_moniker`
       for library_cohort in $library_cohorts; do
          gbs_cohorts="$gbs_cohorts ${library_moniker}.${library_cohort} "
       done
   done
   echo "please enter gbs cohorts to process (default=$gbs_cohorts)"
   read_answer_with_default $gbs_cohorts
   GBS_COHORTS=$answer


   # optionally clean up 
   for cohort in $GBS_COHORTS; do
      if [ -d $OUTPUT_ROOT/$cohort ]; then
         echo "found existing results for $cohort in $OUTPUT_ROOT/$cohort - do you want to reset this cohort ? (y/n, default = y)"
         read_answer_with_default y
         if [ $answer != "y" ]; then
            echo "ok not cleaning - note , rerun may be incomplete"
         else
            set -x
            $GBS_PRISM_BIN/ag_gbs_qc_prism.sh -f -C local -a clean -O $OUTPUT_ROOT -r $RUN $cohort  
            set +x
         fi
      fi
   done
}


function run_qc() {

   echo "

   Ready to run q/c , with the following: 

   $GBS_PRISM_BIN/ag_gbs_qc_prism.sh -f -C $HPC_TYPE -a $ANALYSIS -O $OUTPUT_ROOT -r $RUN $GBS_COHORTS 

   "
   echo "OK to continue ? (y/n - default = y)"
   read_answer_with_default y
   if [ $answer != "y" ]; then
      echo "OK quitting"
      exit 1
   else 
      echo "
      running 

      $GBS_PRISM_BIN/ag_gbs_qc_prism.sh -f -C $HPC_TYPE -a $ANALYSIS -O $OUTPUT_ROOT -r $RUN $GBS_COHORTS
      " > $OUTPUT_ROOT/run_gbs_qc.log 
      echo "
      export SEQ_PRISMS_BIN=$SEQ_PRISMS_BIN
      export GBS_PRISM_BIN=$GBS_PRISM_BIN 
      $GBS_PRISM_BIN/ag_gbs_qc_prism.sh -C $HPC_TYPE -a $ANALYSIS -O $OUTPUT_ROOT -r $RUN $GBS_COHORTS" > $OUTPUT_ROOT/restart_qc.src 

      echo "
      (if you need to kill this run, you can restart using : 
      source $OUTPUT_ROOT/restart_qc.src
      )
      "
    
      time $GBS_PRISM_BIN/ag_gbs_qc_prism.sh -f -C $HPC_TYPE -a $ANALYSIS -O $OUTPUT_ROOT -r $RUN $GBS_COHORTS  >> $OUTPUT_ROOT/run_gbs_qc.log 2>&1
      return_code=$?
   fi
}

function import_results() {

   if [ $return_code != 0 ]; then
      echo "

looks like there may have been a problem with the q/c (non-zero exit code from ag_gbs_qc_prism.sh )  - 
suggest you check  $OUTPUT_ROOT/run_gbs_qc.log. You can manually run the import later using : 
  
$GBS_PRISM_BIN/database_prism.sh -i -t import_results -r $RUN

"
      exit 1
   else
      echo "

looks like q/c completed OK

Ready to summarise and import yield stats using :

$GBS_PRISM_BIN/database_prism.sh -i -t import_results -r $RUN

OK to continue ? (y/n , default = y)"

      read_answer_with_default y
      if [ $answer != "y" ]; then
         echo "OK quitting"
         exit 1
      else
         echo "
      running

      $GBS_PRISM_BIN/database_prism.sh -i -t import_results -r $RUN > $OUTPUT_ROOT/database_results_import.log 2>&1 

      " >> $OUTPUT_ROOT/run_gbs_qc.log
         $GBS_PRISM_BIN/database_prism.sh -i -t import_results -r $RUN > $OUTPUT_ROOT/database_results_import.log 2>&1 
         return_code=$?
         if [ $return_code != 0 ]; then
            echo "

** looks like there was a problem with the import (non-zero return code from database_prism) - check $OUTPUT_ROOT/database_results_import.log  **
( you can run manually using : $GBS_PRISM_BIN/database_prism.sh -i -t import_results -r $RUN )

"
            exit 1
         else
             echo "** database import looks ok **"
         fi
      fi
   fi
}

function generate_html() {

   echo "

   Ready to generate html and client report , with the following:

   $GBS_PRISM_BIN/ag_gbs_qc_prism.sh -f -C local -a html -O $OUTPUT_ROOT -r $RUN $GBS_COHORTS 

   "
   echo "OK to continue ? (y/n)"
   read_answer_with_default y
   if [ $answer != "y" ]; then
      echo "OK quitting"
      exit 1
   else
      echo "
      running

      $GBS_PRISM_BIN/ag_gbs_qc_prism.sh -f -C local -a html -O $OUTPUT_ROOT -r $RUN $GBS_COHORTS

      " >> $OUTPUT_ROOT/run_gbs_qc.log
      $GBS_PRISM_BIN/ag_gbs_qc_prism.sh -f -C local -a html -O $OUTPUT_ROOT -r $RUN $GBS_COHORTS > $OUTPUT_ROOT/generate_html.log 2>&1
      return_code=$?
      if [ $return_code != 0 ]; then
         echo "

** looks like there was a problem with generating html (non-zero return code ) - check $OUTPUT_ROOT/generate_html.log  **
( you can run manually using : $GBS_PRISM_BIN/ag_gbs_qc_prism.sh -f -C local -a html -O $OUTPUT_ROOT -r $RUN )

"
         exit 1
      else
          echo "** html looks ok **"
      fi
   fi
}


get_run_opts
get_cohort_opts
run_qc
import_results
generate_html

