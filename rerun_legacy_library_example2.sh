#!/bin/bash
#
# Example of rerunning one or more libraries, with possibly custom fastq files. (This can be used for legacy libraries as has minimal dependencies e.g. on the database structure)  
#
# The script extracts keyfiles containing all GBS samples for libraries specified, for a specific flowcell
# and does a demultiplexing and KGD run for each, and generates unblinding scripts. 
#
# Example:
#
# rerun_legacy_library_example2.sh 230607_A99999_0177_BABCDEFGXY ABCDEFGXY 
# 
#
export SEQ_PRISMS_BIN=/dataset/gseq_processing/active/bin/gbs_prism/seq_prisms
export GBS_PRISM_BIN=/dataset/gseq_processing/active/bin/gbs_prism

RUN_MONIKER=$1
FLOWCELL=$2

# set up
BASE=/dataset/2023_illumina_sequencing_b/scratch/postprocessing/gbs_sandbox/$RUN_MONIKER  
LIBS="SQ3005 SQ3006 SQ3007 SQ3008 SQ3009 SQ3010 SQ3011 SQ3012 SQ3013 SQ3014" 
FASTQDIR=/dataset/hiseq/active/fastq-link-farm-b # this is usually used to point at the un-deduplicated data 
FLOWCELL=HLTTWDMXY

function demultiplex_kgd() {

   # for each distinct enzyme, get keyfile, and set up and run demultiplex and KGD
   for LIB in $LIBS; do
      WORKDIR=$BASE/$LIB
      mkdir -p $WORKDIR
      echo 'MergeTaxaTagCount -t n' > $WORKDIR/demultiplexing_parameters.txt # this tassel option will be passed to the MergeTaxaTagCount plugin - keeps lanes distinct which we do for novaseq, as part of KGD normalisation
 
      echo "processing $LIB" 

      for enzyme in `gquery -t gbs_keyfile -b library -p "flowcell=$FLOWCELL;columns=enzyme;distinct;noheading" $LIB`; do
         mkdir -p $WORKDIR/$enzyme

         # get keyfile for this enzyme. Note that to be safe we elect to use the "qc_sampleid" safe-sample-names, in case the supplied sample names have features like embedded spaces etc. 
         # which cause processing problems downstream. (See below where an "unblinding" script is extracted, that can be used to edit the text output files to map back to the original sampleid)
         # (if you want to use the original sampleid - usually OK - the gquery extract command would then be
         # gquery -t gbs_keyfile -b library -p "flowcell=$FLOWCELL;enzyme=$enzyme;columns=flowcell,lane,barcode,sample,platename,...
         gquery -t gbs_keyfile -b library -p "flowcell=$FLOWCELL;fastq_path=$FASTQDIR;enzyme=$enzyme;columns=flowcell,lane,barcode,qc_sampleid as sample,platename,platerow as row,platecolumn as column,libraryprepid,counter,comment,enzyme,species,numberofbarcodes,bifo,control,fastq_link" $LIB  > $WORKDIR/$enzyme/sample_info.key

         #run demultiplex – this handles launching demultiplex of each library separately (if doing more than one) , so we don’t confuse tassel3 ! 
         $GBS_PRISM_BIN/demultiplex_prism.sh -C slurm -x tassel3_qc -l $WORKDIR/$enzyme/sample_info.key -p $WORKDIR/demultiplexing_parameters.txt -e $enzyme -O $WORKDIR/$enzyme `gquery -t gbs_keyfile -b library -p "flowcell=$FLOWCELL;fastq_path=$FASTQDIR;columns=fastq_link;distinct;noheading"  $LIB`

         #run KGD
         $GBS_PRISM_BIN/genotype_prism.sh -C slurm  -x KGD_tassel3 -p default $WORKDIR/$enzyme

         # get a "sed" script that can be used to unblind the results – i.e. map the safe-sampleids back to the sampleid’s that were supplied
         gquery -t gbs_keyfile -b library -p "flowcell=$FLOWCELL;enzyme=$enzyme;unblinding;columns=qc_sampleid,sample;noheading" $LIB > $WORKDIR/$enzyme/unblinding_script.sed

         # examples of using the sed script:
         #cat $WORKDIR/$enzyme/TagCount.csv | sed -f $WORKDIR/$enzyme/unblinding_script.sed
         #cat $WORKDIR/$enzyme/GHW05.vcf | sed -f $WORKDIR/$enzyme/unblinding_script.sed
         #cat $WORKDIR/$enzyme/GHW05-PC.csv | sed -f $WORKDIR/$enzyme/unblinding_script.sed
      done
   done
}

#
# runs the unblinding sed scripts generated by the above
#
function unblind() {
   for LIB in $LIBS; do
      WORKDIR=$BASE/$LIB
      mkdir -p $WORKDIR
      for enzyme in `gquery -t gbs_keyfile -b library -p "flowcell=$FLOWCELL;columns=enzyme;distinct;noheading" $LIB`; do
         for file in  $WORKDIR/$enzyme/TagCount.csv $WORKDIR/$enzyme/*.KGD_tassel3.KGD.stdout $WORKDIR/$enzyme/KGD/*.csv $WORKDIR/$enzyme/KGD/*.tsv $WORKDIR/$enzyme/KGD/*.vcf $WORKDIR/$enzyme/hapMap/HapMap.hmc.txt $WORKDIR/$enzyme/hapMap/HapMap.hmp.txt ; do
            if [ -f $file ]; then
               if [ ! -f $file.blinded ]; then
                  cp -p $file $file.blinded
               fi
               cat $file.blinded | sed -f $WORKDIR/$enzyme/unblinding_script.sed  > $file
            fi
         done
      done
   done
}

#
# very basic comparison of filtered and unfiltered output
function compare_and_contrast() {
   for LIB in $LIBS; do
      filtered_SNP_count=`grep -h "Analysing" /dataset/2023_illumina_sequencing_a/scratch/postprocessing/gbs/$RUN_MONIKER/${LIB}.*/${LIB}.*.KGD.stdout | tail -1`
      unfiltered_SNP_count=`grep -h "Analysing" /dataset/2023_illumina_sequencing_b/scratch/postprocessing/gbs_sandbox/$RUN_MONIKER/${LIB}/PstI-MspI/PstI-MspI.KGD_tassel3.KGD.stdout | tail -1`
      echo $LIB ": Un-Filtered - " $unfiltered_SNP_count " : Filtered - " $filtered_SNP_count
   done

   echo "Good reads un-filtered : "
   grep -h good /dataset/2023_illumina_sequencing_b/scratch/postprocessing/gbs_sandbox/$RUN_MONIKER/*/PstI-MspI/TagCount.csv
  
   echo "
Good reads filtered : "
   grep -h good /dataset/2023_illumina_sequencing_a/scratch/postprocessing/gbs/$RUN_MONIKER/SQ3*/TagCount.csv
}

#demultiplex_kgd
#unblind
compare_and_contrast
